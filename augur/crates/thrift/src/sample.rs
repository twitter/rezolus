// Autogenerated by Thrift Compiler (0.16.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity, clippy::vec_box)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::OrderedFloat;
use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

//
// Timestamp
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct Timestamp {
  pub seconds: i64,
  pub nanoseconds: i64,
}

impl Timestamp {
  pub fn new(seconds: i64, nanoseconds: i64) -> Timestamp {
    Timestamp {
      seconds,
      nanoseconds,
    }
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<Timestamp> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    let mut f_2: Option<i64> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i64()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("Timestamp.seconds", &f_1)?;
    verify_required_field_exists("Timestamp.nanoseconds", &f_2)?;
    let ret = Timestamp {
      seconds: f_1.expect("auto-generated code should have checked for presence of required fields"),
      nanoseconds: f_2.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("Timestamp");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("seconds", TType::I64, 1))?;
    o_prot.write_i64(self.seconds)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("nanoseconds", TType::I64, 2))?;
    o_prot.write_i64(self.nanoseconds)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// StackFrame
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct StackFrame {
  pub ip: Option<i64>,
  pub symbol: Option<String>,
  pub dso: Option<String>,
  pub binding: Option<i32>,
  pub start: Option<i64>,
}

impl StackFrame {
  pub fn new<F1, F2, F4, F5, F6>(ip: F1, symbol: F2, dso: F4, binding: F5, start: F6) -> StackFrame where F1: Into<Option<i64>>, F2: Into<Option<String>>, F4: Into<Option<String>>, F5: Into<Option<i32>>, F6: Into<Option<i64>> {
    StackFrame {
      ip: ip.into(),
      symbol: symbol.into(),
      dso: dso.into(),
      binding: binding.into(),
      start: start.into(),
    }
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<StackFrame> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    let mut f_2: Option<String> = None;
    let mut f_4: Option<String> = None;
    let mut f_5: Option<i32> = None;
    let mut f_6: Option<i64> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        4 => {
          let val = i_prot.read_string()?;
          f_4 = Some(val);
        },
        5 => {
          let val = i_prot.read_i32()?;
          f_5 = Some(val);
        },
        6 => {
          let val = i_prot.read_i64()?;
          f_6 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = StackFrame {
      ip: f_1,
      symbol: f_2,
      dso: f_4,
      binding: f_5,
      start: f_6,
    };
    Ok(ret)
  }
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("StackFrame");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(fld_var) = self.ip {
      o_prot.write_field_begin(&TFieldIdentifier::new("ip", TType::I64, 1))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.symbol {
      o_prot.write_field_begin(&TFieldIdentifier::new("symbol", TType::String, 2))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.dso {
      o_prot.write_field_begin(&TFieldIdentifier::new("dso", TType::String, 4))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.binding {
      o_prot.write_field_begin(&TFieldIdentifier::new("binding", TType::I32, 5))?;
      o_prot.write_i32(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.start {
      o_prot.write_field_begin(&TFieldIdentifier::new("start", TType::I64, 6))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

impl Default for StackFrame {
  fn default() -> Self {
    StackFrame{
      ip: Some(0),
      symbol: Some("".to_owned()),
      dso: Some("".to_owned()),
      binding: Some(0),
      start: Some(0),
    }
  }
}

//
// StackSample
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct StackSample {
  pub pid: Option<i32>,
  pub tid: Option<i32>,
  pub cpu: Option<i32>,
  pub time: Timestamp,
  pub frames: Option<Vec<StackFrame>>,
  pub hostname: Option<String>,
  pub service_name: Option<String>,
  pub command: Option<String>,
  pub period: Option<i64>,
  pub instance_id: Option<i32>,
  pub source: Option<String>,
  pub thread_name: Option<String>,
}

impl StackSample {
  pub fn new<F1, F2, F3, F5, F6, F7, F8, F9, F10, F11, F12>(pid: F1, tid: F2, cpu: F3, time: Timestamp, frames: F5, hostname: F6, service_name: F7, command: F8, period: F9, instance_id: F10, source: F11, thread_name: F12) -> StackSample where F1: Into<Option<i32>>, F2: Into<Option<i32>>, F3: Into<Option<i32>>, F5: Into<Option<Vec<StackFrame>>>, F6: Into<Option<String>>, F7: Into<Option<String>>, F8: Into<Option<String>>, F9: Into<Option<i64>>, F10: Into<Option<i32>>, F11: Into<Option<String>>, F12: Into<Option<String>> {
    StackSample {
      pid: pid.into(),
      tid: tid.into(),
      cpu: cpu.into(),
      time,
      frames: frames.into(),
      hostname: hostname.into(),
      service_name: service_name.into(),
      command: command.into(),
      period: period.into(),
      instance_id: instance_id.into(),
      source: source.into(),
      thread_name: thread_name.into(),
    }
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<StackSample> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i32> = None;
    let mut f_2: Option<i32> = None;
    let mut f_3: Option<i32> = None;
    let mut f_4: Option<Timestamp> = None;
    let mut f_5: Option<Vec<StackFrame>> = Some(Vec::new());
    let mut f_6: Option<String> = None;
    let mut f_7: Option<String> = None;
    let mut f_8: Option<String> = None;
    let mut f_9: Option<i64> = None;
    let mut f_10: Option<i32> = None;
    let mut f_11: Option<String> = None;
    let mut f_12: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i32()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i32()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_i32()?;
          f_3 = Some(val);
        },
        4 => {
          let val = Timestamp::read_from_in_protocol(i_prot)?;
          f_4 = Some(val);
        },
        5 => {
          let list_ident = i_prot.read_list_begin()?;
          let mut val: Vec<StackFrame> = Vec::with_capacity(list_ident.size as usize);
          for _ in 0..list_ident.size {
            let list_elem_0 = StackFrame::read_from_in_protocol(i_prot)?;
            val.push(list_elem_0);
          }
          i_prot.read_list_end()?;
          f_5 = Some(val);
        },
        6 => {
          let val = i_prot.read_string()?;
          f_6 = Some(val);
        },
        7 => {
          let val = i_prot.read_string()?;
          f_7 = Some(val);
        },
        8 => {
          let val = i_prot.read_string()?;
          f_8 = Some(val);
        },
        9 => {
          let val = i_prot.read_i64()?;
          f_9 = Some(val);
        },
        10 => {
          let val = i_prot.read_i32()?;
          f_10 = Some(val);
        },
        11 => {
          let val = i_prot.read_string()?;
          f_11 = Some(val);
        },
        12 => {
          let val = i_prot.read_string()?;
          f_12 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("StackSample.time", &f_4)?;
    let ret = StackSample {
      pid: f_1,
      tid: f_2,
      cpu: f_3,
      time: f_4.expect("auto-generated code should have checked for presence of required fields"),
      frames: f_5,
      hostname: f_6,
      service_name: f_7,
      command: f_8,
      period: f_9,
      instance_id: f_10,
      source: f_11,
      thread_name: f_12,
    };
    Ok(ret)
  }
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("StackSample");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(fld_var) = self.pid {
      o_prot.write_field_begin(&TFieldIdentifier::new("pid", TType::I32, 1))?;
      o_prot.write_i32(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.tid {
      o_prot.write_field_begin(&TFieldIdentifier::new("tid", TType::I32, 2))?;
      o_prot.write_i32(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.cpu {
      o_prot.write_field_begin(&TFieldIdentifier::new("cpu", TType::I32, 3))?;
      o_prot.write_i32(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_begin(&TFieldIdentifier::new("time", TType::Struct, 4))?;
    self.time.write_to_out_protocol(o_prot)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.frames {
      o_prot.write_field_begin(&TFieldIdentifier::new("frames", TType::List, 5))?;
      o_prot.write_list_begin(&TListIdentifier::new(TType::Struct, fld_var.len() as i32))?;
      for e in fld_var {
        e.write_to_out_protocol(o_prot)?;
      }
      o_prot.write_list_end()?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.hostname {
      o_prot.write_field_begin(&TFieldIdentifier::new("hostname", TType::String, 6))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.service_name {
      o_prot.write_field_begin(&TFieldIdentifier::new("serviceName", TType::String, 7))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.command {
      o_prot.write_field_begin(&TFieldIdentifier::new("command", TType::String, 8))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.period {
      o_prot.write_field_begin(&TFieldIdentifier::new("period", TType::I64, 9))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.instance_id {
      o_prot.write_field_begin(&TFieldIdentifier::new("instanceId", TType::I32, 10))?;
      o_prot.write_i32(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.source {
      o_prot.write_field_begin(&TFieldIdentifier::new("source", TType::String, 11))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.thread_name {
      o_prot.write_field_begin(&TFieldIdentifier::new("threadName", TType::String, 12))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}


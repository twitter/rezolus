// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pprof.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:perftools.profiles.Profile)
pub struct Profile {
    // message fields
    ///  A description of the samples associated with each Sample.value.
    ///  For a cpu profile this might be:
    ///    [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
    ///  For a heap profile, this might be:
    ///    [["allocations","count"], ["space","bytes"]],
    ///  If one of the values represents the number of events represented
    ///  by the sample, by convention it should be at index 0 and use
    ///  sample_type.unit == "count".
    // @@protoc_insertion_point(field:perftools.profiles.Profile.sample_type)
    pub sample_type: ::std::vec::Vec<ValueType>,
    ///  The set of samples recorded in this profile.
    // @@protoc_insertion_point(field:perftools.profiles.Profile.sample)
    pub sample: ::std::vec::Vec<Sample>,
    ///  Mapping from address ranges to the image/binary/library mapped
    ///  into that address range.  mapping[0] will be the main binary.
    // @@protoc_insertion_point(field:perftools.profiles.Profile.mapping)
    pub mapping: ::std::vec::Vec<Mapping>,
    ///  Useful program location
    // @@protoc_insertion_point(field:perftools.profiles.Profile.location)
    pub location: ::std::vec::Vec<Location>,
    ///  Functions referenced by locations
    // @@protoc_insertion_point(field:perftools.profiles.Profile.function)
    pub function: ::std::vec::Vec<Function>,
    ///  A common table for strings referenced by various messages.
    ///  string_table[0] must always be "".
    // @@protoc_insertion_point(field:perftools.profiles.Profile.string_table)
    pub string_table: ::std::vec::Vec<::std::string::String>,
    ///  frames with Function.function_name fully matching the following
    ///  regexp will be dropped from the samples, along with their successors.
    // @@protoc_insertion_point(field:perftools.profiles.Profile.drop_frames)
    pub drop_frames: i64,
    ///  frames with Function.function_name fully matching the following
    ///  regexp will be kept, even if it matches drop_frames.
    // @@protoc_insertion_point(field:perftools.profiles.Profile.keep_frames)
    pub keep_frames: i64,
    ///  Time of collection (UTC) represented as nanoseconds past the epoch.
    // @@protoc_insertion_point(field:perftools.profiles.Profile.time_nanos)
    pub time_nanos: i64,
    ///  Duration of the profile, if a duration makes sense.
    // @@protoc_insertion_point(field:perftools.profiles.Profile.duration_nanos)
    pub duration_nanos: i64,
    ///  The kind of events between sampled ocurrences.
    ///  e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
    // @@protoc_insertion_point(field:perftools.profiles.Profile.period_type)
    pub period_type: ::protobuf::MessageField<ValueType>,
    ///  The number of events between sampled occurrences.
    // @@protoc_insertion_point(field:perftools.profiles.Profile.period)
    pub period: i64,
    ///  Freeform text associated to the profile.
    // @@protoc_insertion_point(field:perftools.profiles.Profile.comment)
    pub comment: ::std::vec::Vec<i64>,
    ///  Index into the string table of the type of the preferred sample
    ///  value. If unset, clients should default to the last sample value.
    // @@protoc_insertion_point(field:perftools.profiles.Profile.default_sample_type)
    pub default_sample_type: i64,
    // special fields
    // @@protoc_insertion_point(special_field:perftools.profiles.Profile.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Profile {
    fn default() -> &'a Profile {
        <Profile as ::protobuf::Message>::default_instance()
    }
}

impl Profile {
    pub fn new() -> Profile {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sample_type",
            |m: &Profile| { &m.sample_type },
            |m: &mut Profile| { &mut m.sample_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sample",
            |m: &Profile| { &m.sample },
            |m: &mut Profile| { &mut m.sample },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "mapping",
            |m: &Profile| { &m.mapping },
            |m: &mut Profile| { &mut m.mapping },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "location",
            |m: &Profile| { &m.location },
            |m: &mut Profile| { &mut m.location },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "function",
            |m: &Profile| { &m.function },
            |m: &mut Profile| { &mut m.function },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "string_table",
            |m: &Profile| { &m.string_table },
            |m: &mut Profile| { &mut m.string_table },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "drop_frames",
            |m: &Profile| { &m.drop_frames },
            |m: &mut Profile| { &mut m.drop_frames },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "keep_frames",
            |m: &Profile| { &m.keep_frames },
            |m: &mut Profile| { &mut m.keep_frames },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time_nanos",
            |m: &Profile| { &m.time_nanos },
            |m: &mut Profile| { &mut m.time_nanos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "duration_nanos",
            |m: &Profile| { &m.duration_nanos },
            |m: &mut Profile| { &mut m.duration_nanos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ValueType>(
            "period_type",
            |m: &Profile| { &m.period_type },
            |m: &mut Profile| { &mut m.period_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "period",
            |m: &Profile| { &m.period },
            |m: &mut Profile| { &mut m.period },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "comment",
            |m: &Profile| { &m.comment },
            |m: &mut Profile| { &mut m.comment },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "default_sample_type",
            |m: &Profile| { &m.default_sample_type },
            |m: &mut Profile| { &mut m.default_sample_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Profile>(
            "Profile",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Profile {
    const NAME: &'static str = "Profile";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sample_type.push(is.read_message()?);
                },
                18 => {
                    self.sample.push(is.read_message()?);
                },
                26 => {
                    self.mapping.push(is.read_message()?);
                },
                34 => {
                    self.location.push(is.read_message()?);
                },
                42 => {
                    self.function.push(is.read_message()?);
                },
                50 => {
                    self.string_table.push(is.read_string()?);
                },
                56 => {
                    self.drop_frames = is.read_int64()?;
                },
                64 => {
                    self.keep_frames = is.read_int64()?;
                },
                72 => {
                    self.time_nanos = is.read_int64()?;
                },
                80 => {
                    self.duration_nanos = is.read_int64()?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.period_type)?;
                },
                96 => {
                    self.period = is.read_int64()?;
                },
                106 => {
                    is.read_repeated_packed_int64_into(&mut self.comment)?;
                },
                104 => {
                    self.comment.push(is.read_int64()?);
                },
                112 => {
                    self.default_sample_type = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.sample_type {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.sample {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.mapping {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.location {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.function {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.string_table {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        if self.drop_frames != 0 {
            my_size += ::protobuf::rt::int64_size(7, self.drop_frames);
        }
        if self.keep_frames != 0 {
            my_size += ::protobuf::rt::int64_size(8, self.keep_frames);
        }
        if self.time_nanos != 0 {
            my_size += ::protobuf::rt::int64_size(9, self.time_nanos);
        }
        if self.duration_nanos != 0 {
            my_size += ::protobuf::rt::int64_size(10, self.duration_nanos);
        }
        if let Some(v) = self.period_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.period != 0 {
            my_size += ::protobuf::rt::int64_size(12, self.period);
        }
        for value in &self.comment {
            my_size += ::protobuf::rt::int64_size(13, *value);
        };
        if self.default_sample_type != 0 {
            my_size += ::protobuf::rt::int64_size(14, self.default_sample_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.sample_type {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.sample {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.mapping {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.location {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.function {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.string_table {
            os.write_string(6, &v)?;
        };
        if self.drop_frames != 0 {
            os.write_int64(7, self.drop_frames)?;
        }
        if self.keep_frames != 0 {
            os.write_int64(8, self.keep_frames)?;
        }
        if self.time_nanos != 0 {
            os.write_int64(9, self.time_nanos)?;
        }
        if self.duration_nanos != 0 {
            os.write_int64(10, self.duration_nanos)?;
        }
        if let Some(v) = self.period_type.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if self.period != 0 {
            os.write_int64(12, self.period)?;
        }
        for v in &self.comment {
            os.write_int64(13, *v)?;
        };
        if self.default_sample_type != 0 {
            os.write_int64(14, self.default_sample_type)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Profile {
        Profile::new()
    }

    fn clear(&mut self) {
        self.sample_type.clear();
        self.sample.clear();
        self.mapping.clear();
        self.location.clear();
        self.function.clear();
        self.string_table.clear();
        self.drop_frames = 0;
        self.keep_frames = 0;
        self.time_nanos = 0;
        self.duration_nanos = 0;
        self.period_type.clear();
        self.period = 0;
        self.comment.clear();
        self.default_sample_type = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Profile {
        static instance: Profile = Profile {
            sample_type: ::std::vec::Vec::new(),
            sample: ::std::vec::Vec::new(),
            mapping: ::std::vec::Vec::new(),
            location: ::std::vec::Vec::new(),
            function: ::std::vec::Vec::new(),
            string_table: ::std::vec::Vec::new(),
            drop_frames: 0,
            keep_frames: 0,
            time_nanos: 0,
            duration_nanos: 0,
            period_type: ::protobuf::MessageField::none(),
            period: 0,
            comment: ::std::vec::Vec::new(),
            default_sample_type: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Profile {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Profile").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Profile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Profile {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ValueType describes the semantics and measurement units of a value.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:perftools.profiles.ValueType)
pub struct ValueType {
    // message fields
    // @@protoc_insertion_point(field:perftools.profiles.ValueType.type)
    pub type_: i64,
    // @@protoc_insertion_point(field:perftools.profiles.ValueType.unit)
    pub unit: i64,
    // special fields
    // @@protoc_insertion_point(special_field:perftools.profiles.ValueType.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ValueType {
    fn default() -> &'a ValueType {
        <ValueType as ::protobuf::Message>::default_instance()
    }
}

impl ValueType {
    pub fn new() -> ValueType {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &ValueType| { &m.type_ },
            |m: &mut ValueType| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "unit",
            |m: &ValueType| { &m.unit },
            |m: &mut ValueType| { &mut m.unit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ValueType>(
            "ValueType",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ValueType {
    const NAME: &'static str = "ValueType";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_int64()?;
                },
                16 => {
                    self.unit = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.type_);
        }
        if self.unit != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.unit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != 0 {
            os.write_int64(1, self.type_)?;
        }
        if self.unit != 0 {
            os.write_int64(2, self.unit)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ValueType {
        ValueType::new()
    }

    fn clear(&mut self) {
        self.type_ = 0;
        self.unit = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ValueType {
        static instance: ValueType = ValueType {
            type_: 0,
            unit: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ValueType {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ValueType").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ValueType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValueType {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Each Sample records values encountered in some program
///  context. The program context is typically a stack trace, perhaps
///  augmented with auxiliary information like the thread-id, some
///  indicator of a higher level request being handled etc.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:perftools.profiles.Sample)
pub struct Sample {
    // message fields
    ///  The ids recorded here correspond to a Profile.location.id.
    ///  The leaf is at location_id[0].
    // @@protoc_insertion_point(field:perftools.profiles.Sample.location_id)
    pub location_id: ::std::vec::Vec<u64>,
    ///  The type and unit of each value is defined by the corresponding
    ///  entry in Profile.sample_type. All samples must have the same
    ///  number of values, the same as the length of Profile.sample_type.
    ///  When aggregating multiple samples into a single sample, the
    ///  result has a list of values that is the element-wise sum of the
    ///  lists of the originals.
    // @@protoc_insertion_point(field:perftools.profiles.Sample.value)
    pub value: ::std::vec::Vec<i64>,
    ///  label includes additional context for this sample. It can include
    ///  things like a thread id, allocation size, etc
    // @@protoc_insertion_point(field:perftools.profiles.Sample.label)
    pub label: ::std::vec::Vec<Label>,
    // special fields
    // @@protoc_insertion_point(special_field:perftools.profiles.Sample.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Sample {
    fn default() -> &'a Sample {
        <Sample as ::protobuf::Message>::default_instance()
    }
}

impl Sample {
    pub fn new() -> Sample {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "location_id",
            |m: &Sample| { &m.location_id },
            |m: &mut Sample| { &mut m.location_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "value",
            |m: &Sample| { &m.value },
            |m: &mut Sample| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "label",
            |m: &Sample| { &m.label },
            |m: &mut Sample| { &mut m.label },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Sample>(
            "Sample",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Sample {
    const NAME: &'static str = "Sample";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint64_into(&mut self.location_id)?;
                },
                8 => {
                    self.location_id.push(is.read_uint64()?);
                },
                18 => {
                    is.read_repeated_packed_int64_into(&mut self.value)?;
                },
                16 => {
                    self.value.push(is.read_int64()?);
                },
                26 => {
                    self.label.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.location_id {
            my_size += ::protobuf::rt::uint64_size(1, *value);
        };
        for value in &self.value {
            my_size += ::protobuf::rt::int64_size(2, *value);
        };
        for value in &self.label {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.location_id {
            os.write_uint64(1, *v)?;
        };
        for v in &self.value {
            os.write_int64(2, *v)?;
        };
        for v in &self.label {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Sample {
        Sample::new()
    }

    fn clear(&mut self) {
        self.location_id.clear();
        self.value.clear();
        self.label.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Sample {
        static instance: Sample = Sample {
            location_id: ::std::vec::Vec::new(),
            value: ::std::vec::Vec::new(),
            label: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Sample {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Sample").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Sample {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sample {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:perftools.profiles.Label)
pub struct Label {
    // message fields
    // @@protoc_insertion_point(field:perftools.profiles.Label.key)
    pub key: i64,
    ///  At most one of the following must be present
    // @@protoc_insertion_point(field:perftools.profiles.Label.str)
    pub str: i64,
    // @@protoc_insertion_point(field:perftools.profiles.Label.num)
    pub num: i64,
    ///  Should only be present when num is present.
    ///  Specifies the units of num.
    ///  Use arbitrary string (for example, "requests") as a custom count unit.
    ///  If no unit is specified, consumer may apply heuristic to deduce the unit.
    ///  Consumers may also  interpret units like "bytes" and "kilobytes" as memory
    ///  units and units like "seconds" and "nanoseconds" as time units,
    ///  and apply appropriate unit conversions to these.
    // @@protoc_insertion_point(field:perftools.profiles.Label.num_unit)
    pub num_unit: i64,
    // special fields
    // @@protoc_insertion_point(special_field:perftools.profiles.Label.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Label {
    fn default() -> &'a Label {
        <Label as ::protobuf::Message>::default_instance()
    }
}

impl Label {
    pub fn new() -> Label {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &Label| { &m.key },
            |m: &mut Label| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "str",
            |m: &Label| { &m.str },
            |m: &mut Label| { &mut m.str },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "num",
            |m: &Label| { &m.num },
            |m: &mut Label| { &mut m.num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "num_unit",
            |m: &Label| { &m.num_unit },
            |m: &mut Label| { &mut m.num_unit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Label>(
            "Label",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Label {
    const NAME: &'static str = "Label";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.key = is.read_int64()?;
                },
                16 => {
                    self.str = is.read_int64()?;
                },
                24 => {
                    self.num = is.read_int64()?;
                },
                32 => {
                    self.num_unit = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.key != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.key);
        }
        if self.str != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.str);
        }
        if self.num != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.num);
        }
        if self.num_unit != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.num_unit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.key != 0 {
            os.write_int64(1, self.key)?;
        }
        if self.str != 0 {
            os.write_int64(2, self.str)?;
        }
        if self.num != 0 {
            os.write_int64(3, self.num)?;
        }
        if self.num_unit != 0 {
            os.write_int64(4, self.num_unit)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Label {
        Label::new()
    }

    fn clear(&mut self) {
        self.key = 0;
        self.str = 0;
        self.num = 0;
        self.num_unit = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Label {
        static instance: Label = Label {
            key: 0,
            str: 0,
            num: 0,
            num_unit: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Label {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Label").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Label {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Label {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:perftools.profiles.Mapping)
pub struct Mapping {
    // message fields
    ///  Unique nonzero id for the mapping.
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.id)
    pub id: u64,
    ///  Address at which the binary (or DLL) is loaded into memory.
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.memory_start)
    pub memory_start: u64,
    ///  The limit of the address range occupied by this mapping.
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.memory_limit)
    pub memory_limit: u64,
    ///  Offset in the binary that corresponds to the first mapped address.
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.file_offset)
    pub file_offset: u64,
    ///  The object this entry is loaded from.  This can be a filename on
    ///  disk for the main binary and shared libraries, or virtual
    ///  abstractions like "[vdso]".
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.filename)
    pub filename: i64,
    ///  A string that uniquely identifies a particular program version
    ///  with high probability. E.g., for binaries generated by GNU tools,
    ///  it could be the contents of the .note.gnu.build-id field.
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.build_id)
    pub build_id: i64,
    ///  The following fields indicate the resolution of symbolic info.
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.has_functions)
    pub has_functions: bool,
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.has_filenames)
    pub has_filenames: bool,
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.has_line_numbers)
    pub has_line_numbers: bool,
    // @@protoc_insertion_point(field:perftools.profiles.Mapping.has_inline_frames)
    pub has_inline_frames: bool,
    // special fields
    // @@protoc_insertion_point(special_field:perftools.profiles.Mapping.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Mapping {
    fn default() -> &'a Mapping {
        <Mapping as ::protobuf::Message>::default_instance()
    }
}

impl Mapping {
    pub fn new() -> Mapping {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Mapping| { &m.id },
            |m: &mut Mapping| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "memory_start",
            |m: &Mapping| { &m.memory_start },
            |m: &mut Mapping| { &mut m.memory_start },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "memory_limit",
            |m: &Mapping| { &m.memory_limit },
            |m: &mut Mapping| { &mut m.memory_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "file_offset",
            |m: &Mapping| { &m.file_offset },
            |m: &mut Mapping| { &mut m.file_offset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "filename",
            |m: &Mapping| { &m.filename },
            |m: &mut Mapping| { &mut m.filename },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "build_id",
            |m: &Mapping| { &m.build_id },
            |m: &mut Mapping| { &mut m.build_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "has_functions",
            |m: &Mapping| { &m.has_functions },
            |m: &mut Mapping| { &mut m.has_functions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "has_filenames",
            |m: &Mapping| { &m.has_filenames },
            |m: &mut Mapping| { &mut m.has_filenames },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "has_line_numbers",
            |m: &Mapping| { &m.has_line_numbers },
            |m: &mut Mapping| { &mut m.has_line_numbers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "has_inline_frames",
            |m: &Mapping| { &m.has_inline_frames },
            |m: &mut Mapping| { &mut m.has_inline_frames },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Mapping>(
            "Mapping",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Mapping {
    const NAME: &'static str = "Mapping";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint64()?;
                },
                16 => {
                    self.memory_start = is.read_uint64()?;
                },
                24 => {
                    self.memory_limit = is.read_uint64()?;
                },
                32 => {
                    self.file_offset = is.read_uint64()?;
                },
                40 => {
                    self.filename = is.read_int64()?;
                },
                48 => {
                    self.build_id = is.read_int64()?;
                },
                56 => {
                    self.has_functions = is.read_bool()?;
                },
                64 => {
                    self.has_filenames = is.read_bool()?;
                },
                72 => {
                    self.has_line_numbers = is.read_bool()?;
                },
                80 => {
                    self.has_inline_frames = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.id);
        }
        if self.memory_start != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.memory_start);
        }
        if self.memory_limit != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.memory_limit);
        }
        if self.file_offset != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.file_offset);
        }
        if self.filename != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.filename);
        }
        if self.build_id != 0 {
            my_size += ::protobuf::rt::int64_size(6, self.build_id);
        }
        if self.has_functions != false {
            my_size += 1 + 1;
        }
        if self.has_filenames != false {
            my_size += 1 + 1;
        }
        if self.has_line_numbers != false {
            my_size += 1 + 1;
        }
        if self.has_inline_frames != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.memory_start != 0 {
            os.write_uint64(2, self.memory_start)?;
        }
        if self.memory_limit != 0 {
            os.write_uint64(3, self.memory_limit)?;
        }
        if self.file_offset != 0 {
            os.write_uint64(4, self.file_offset)?;
        }
        if self.filename != 0 {
            os.write_int64(5, self.filename)?;
        }
        if self.build_id != 0 {
            os.write_int64(6, self.build_id)?;
        }
        if self.has_functions != false {
            os.write_bool(7, self.has_functions)?;
        }
        if self.has_filenames != false {
            os.write_bool(8, self.has_filenames)?;
        }
        if self.has_line_numbers != false {
            os.write_bool(9, self.has_line_numbers)?;
        }
        if self.has_inline_frames != false {
            os.write_bool(10, self.has_inline_frames)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Mapping {
        Mapping::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.memory_start = 0;
        self.memory_limit = 0;
        self.file_offset = 0;
        self.filename = 0;
        self.build_id = 0;
        self.has_functions = false;
        self.has_filenames = false;
        self.has_line_numbers = false;
        self.has_inline_frames = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Mapping {
        static instance: Mapping = Mapping {
            id: 0,
            memory_start: 0,
            memory_limit: 0,
            file_offset: 0,
            filename: 0,
            build_id: 0,
            has_functions: false,
            has_filenames: false,
            has_line_numbers: false,
            has_inline_frames: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Mapping {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Mapping").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Mapping {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Mapping {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Describes function and line table debug information.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:perftools.profiles.Location)
pub struct Location {
    // message fields
    ///  Unique nonzero id for the location.  A profile could use
    ///  instruction addresses or any integer sequence as ids.
    // @@protoc_insertion_point(field:perftools.profiles.Location.id)
    pub id: u64,
    ///  The id of the corresponding profile.Mapping for this location.
    ///  It can be unset if the mapping is unknown or not applicable for
    ///  this profile type.
    // @@protoc_insertion_point(field:perftools.profiles.Location.mapping_id)
    pub mapping_id: u64,
    ///  The instruction address for this location, if available.  It
    ///  should be within [Mapping.memory_start...Mapping.memory_limit]
    ///  for the corresponding mapping. A non-leaf address may be in the
    ///  middle of a call instruction. It is up to display tools to find
    ///  the beginning of the instruction if necessary.
    // @@protoc_insertion_point(field:perftools.profiles.Location.address)
    pub address: u64,
    // @@protoc_insertion_point(field:perftools.profiles.Location.line)
    pub line: ::std::vec::Vec<Line>,
    ///  Provides an indication that multiple symbols map to this location's
    ///  address, for example due to identical code folding by the linker. In that
    ///  case the line information above represents one of the multiple
    ///  symbols. This field must be recomputed when the symbolization state of the
    ///  profile changes.
    // @@protoc_insertion_point(field:perftools.profiles.Location.is_folded)
    pub is_folded: bool,
    // special fields
    // @@protoc_insertion_point(special_field:perftools.profiles.Location.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Location {
    fn default() -> &'a Location {
        <Location as ::protobuf::Message>::default_instance()
    }
}

impl Location {
    pub fn new() -> Location {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Location| { &m.id },
            |m: &mut Location| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mapping_id",
            |m: &Location| { &m.mapping_id },
            |m: &mut Location| { &mut m.mapping_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &Location| { &m.address },
            |m: &mut Location| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "line",
            |m: &Location| { &m.line },
            |m: &mut Location| { &mut m.line },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_folded",
            |m: &Location| { &m.is_folded },
            |m: &mut Location| { &mut m.is_folded },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Location>(
            "Location",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Location {
    const NAME: &'static str = "Location";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint64()?;
                },
                16 => {
                    self.mapping_id = is.read_uint64()?;
                },
                24 => {
                    self.address = is.read_uint64()?;
                },
                34 => {
                    self.line.push(is.read_message()?);
                },
                40 => {
                    self.is_folded = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.id);
        }
        if self.mapping_id != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.mapping_id);
        }
        if self.address != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.address);
        }
        for value in &self.line {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.is_folded != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.mapping_id != 0 {
            os.write_uint64(2, self.mapping_id)?;
        }
        if self.address != 0 {
            os.write_uint64(3, self.address)?;
        }
        for v in &self.line {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if self.is_folded != false {
            os.write_bool(5, self.is_folded)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Location {
        Location::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.mapping_id = 0;
        self.address = 0;
        self.line.clear();
        self.is_folded = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Location {
        static instance: Location = Location {
            id: 0,
            mapping_id: 0,
            address: 0,
            line: ::std::vec::Vec::new(),
            is_folded: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Location {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Location").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Location {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Location {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:perftools.profiles.Line)
pub struct Line {
    // message fields
    ///  The id of the corresponding profile.Function for this line.
    // @@protoc_insertion_point(field:perftools.profiles.Line.function_id)
    pub function_id: u64,
    ///  Line number in source code.
    // @@protoc_insertion_point(field:perftools.profiles.Line.line)
    pub line: i64,
    // special fields
    // @@protoc_insertion_point(special_field:perftools.profiles.Line.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Line {
    fn default() -> &'a Line {
        <Line as ::protobuf::Message>::default_instance()
    }
}

impl Line {
    pub fn new() -> Line {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "function_id",
            |m: &Line| { &m.function_id },
            |m: &mut Line| { &mut m.function_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "line",
            |m: &Line| { &m.line },
            |m: &mut Line| { &mut m.line },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Line>(
            "Line",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Line {
    const NAME: &'static str = "Line";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.function_id = is.read_uint64()?;
                },
                16 => {
                    self.line = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.function_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.function_id);
        }
        if self.line != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.line);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.function_id != 0 {
            os.write_uint64(1, self.function_id)?;
        }
        if self.line != 0 {
            os.write_int64(2, self.line)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Line {
        Line::new()
    }

    fn clear(&mut self) {
        self.function_id = 0;
        self.line = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Line {
        static instance: Line = Line {
            function_id: 0,
            line: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Line {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Line").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Line {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Line {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:perftools.profiles.Function)
pub struct Function {
    // message fields
    ///  Unique nonzero id for the function.
    // @@protoc_insertion_point(field:perftools.profiles.Function.id)
    pub id: u64,
    ///  Name of the function, in human-readable form if available.
    // @@protoc_insertion_point(field:perftools.profiles.Function.name)
    pub name: i64,
    ///  Name of the function, as identified by the system.
    ///  For instance, it can be a C++ mangled name.
    // @@protoc_insertion_point(field:perftools.profiles.Function.system_name)
    pub system_name: i64,
    ///  Source file containing the function.
    // @@protoc_insertion_point(field:perftools.profiles.Function.filename)
    pub filename: i64,
    ///  Line number in source file.
    // @@protoc_insertion_point(field:perftools.profiles.Function.start_line)
    pub start_line: i64,
    // special fields
    // @@protoc_insertion_point(special_field:perftools.profiles.Function.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Function {
    fn default() -> &'a Function {
        <Function as ::protobuf::Message>::default_instance()
    }
}

impl Function {
    pub fn new() -> Function {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Function| { &m.id },
            |m: &mut Function| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Function| { &m.name },
            |m: &mut Function| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "system_name",
            |m: &Function| { &m.system_name },
            |m: &mut Function| { &mut m.system_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "filename",
            |m: &Function| { &m.filename },
            |m: &mut Function| { &mut m.filename },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_line",
            |m: &Function| { &m.start_line },
            |m: &mut Function| { &mut m.start_line },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Function>(
            "Function",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Function {
    const NAME: &'static str = "Function";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint64()?;
                },
                16 => {
                    self.name = is.read_int64()?;
                },
                24 => {
                    self.system_name = is.read_int64()?;
                },
                32 => {
                    self.filename = is.read_int64()?;
                },
                40 => {
                    self.start_line = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.id);
        }
        if self.name != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.name);
        }
        if self.system_name != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.system_name);
        }
        if self.filename != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.filename);
        }
        if self.start_line != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.start_line);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.name != 0 {
            os.write_int64(2, self.name)?;
        }
        if self.system_name != 0 {
            os.write_int64(3, self.system_name)?;
        }
        if self.filename != 0 {
            os.write_int64(4, self.filename)?;
        }
        if self.start_line != 0 {
            os.write_int64(5, self.start_line)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Function {
        Function::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.name = 0;
        self.system_name = 0;
        self.filename = 0;
        self.start_line = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Function {
        static instance: Function = Function {
            id: 0,
            name: 0,
            system_name: 0,
            filename: 0,
            start_line: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Function {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Function").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Function {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Function {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bpprof.proto\x12\x12perftools.profiles\"\xf5\x04\n\x07Profile\x12>\
    \n\x0bsample_type\x18\x01\x20\x03(\x0b2\x1d.perftools.profiles.ValueType\
    R\nsampleType\x122\n\x06sample\x18\x02\x20\x03(\x0b2\x1a.perftools.profi\
    les.SampleR\x06sample\x125\n\x07mapping\x18\x03\x20\x03(\x0b2\x1b.perfto\
    ols.profiles.MappingR\x07mapping\x128\n\x08location\x18\x04\x20\x03(\x0b\
    2\x1c.perftools.profiles.LocationR\x08location\x128\n\x08function\x18\
    \x05\x20\x03(\x0b2\x1c.perftools.profiles.FunctionR\x08function\x12!\n\
    \x0cstring_table\x18\x06\x20\x03(\tR\x0bstringTable\x12\x1f\n\x0bdrop_fr\
    ames\x18\x07\x20\x01(\x03R\ndropFrames\x12\x1f\n\x0bkeep_frames\x18\x08\
    \x20\x01(\x03R\nkeepFrames\x12\x1d\n\ntime_nanos\x18\t\x20\x01(\x03R\tti\
    meNanos\x12%\n\x0eduration_nanos\x18\n\x20\x01(\x03R\rdurationNanos\x12>\
    \n\x0bperiod_type\x18\x0b\x20\x01(\x0b2\x1d.perftools.profiles.ValueType\
    R\nperiodType\x12\x16\n\x06period\x18\x0c\x20\x01(\x03R\x06period\x12\
    \x18\n\x07comment\x18\r\x20\x03(\x03R\x07comment\x12.\n\x13default_sampl\
    e_type\x18\x0e\x20\x01(\x03R\x11defaultSampleType\"3\n\tValueType\x12\
    \x12\n\x04type\x18\x01\x20\x01(\x03R\x04type\x12\x12\n\x04unit\x18\x02\
    \x20\x01(\x03R\x04unit\"p\n\x06Sample\x12\x1f\n\x0blocation_id\x18\x01\
    \x20\x03(\x04R\nlocationId\x12\x14\n\x05value\x18\x02\x20\x03(\x03R\x05v\
    alue\x12/\n\x05label\x18\x03\x20\x03(\x0b2\x19.perftools.profiles.LabelR\
    \x05label\"X\n\x05Label\x12\x10\n\x03key\x18\x01\x20\x01(\x03R\x03key\
    \x12\x10\n\x03str\x18\x02\x20\x01(\x03R\x03str\x12\x10\n\x03num\x18\x03\
    \x20\x01(\x03R\x03num\x12\x19\n\x08num_unit\x18\x04\x20\x01(\x03R\x07num\
    Unit\"\xd7\x02\n\x07Mapping\x12\x0e\n\x02id\x18\x01\x20\x01(\x04R\x02id\
    \x12!\n\x0cmemory_start\x18\x02\x20\x01(\x04R\x0bmemoryStart\x12!\n\x0cm\
    emory_limit\x18\x03\x20\x01(\x04R\x0bmemoryLimit\x12\x1f\n\x0bfile_offse\
    t\x18\x04\x20\x01(\x04R\nfileOffset\x12\x1a\n\x08filename\x18\x05\x20\
    \x01(\x03R\x08filename\x12\x19\n\x08build_id\x18\x06\x20\x01(\x03R\x07bu\
    ildId\x12#\n\rhas_functions\x18\x07\x20\x01(\x08R\x0chasFunctions\x12#\n\
    \rhas_filenames\x18\x08\x20\x01(\x08R\x0chasFilenames\x12(\n\x10has_line\
    _numbers\x18\t\x20\x01(\x08R\x0ehasLineNumbers\x12*\n\x11has_inline_fram\
    es\x18\n\x20\x01(\x08R\x0fhasInlineFrames\"\x9e\x01\n\x08Location\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\x04R\x02id\x12\x1d\n\nmapping_id\x18\x02\
    \x20\x01(\x04R\tmappingId\x12\x18\n\x07address\x18\x03\x20\x01(\x04R\x07\
    address\x12,\n\x04line\x18\x04\x20\x03(\x0b2\x18.perftools.profiles.Line\
    R\x04line\x12\x1b\n\tis_folded\x18\x05\x20\x01(\x08R\x08isFolded\";\n\
    \x04Line\x12\x1f\n\x0bfunction_id\x18\x01\x20\x01(\x04R\nfunctionId\x12\
    \x12\n\x04line\x18\x02\x20\x01(\x03R\x04line\"\x8a\x01\n\x08Function\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\x04R\x02id\x12\x12\n\x04name\x18\x02\x20\
    \x01(\x03R\x04name\x12\x1f\n\x0bsystem_name\x18\x03\x20\x01(\x03R\nsyste\
    mName\x12\x1a\n\x08filename\x18\x04\x20\x01(\x03R\x08filename\x12\x1d\n\
    \nstart_line\x18\x05\x20\x01(\x03R\tstartLineB-\n\x1dcom.google.perftool\
    s.profilesB\x0cProfileProtoJ\xc1N\n\x07\x12\x05&\0\xd3\x01\x01\n\x9e\x0c\
    \n\x01\x0c\x12\x03&\0\x122\xc7\x04\x20Copyright\x202016\x20Google\x20Inc\
    .\x20All\x20Rights\x20Reserved.\n\n\x20Licensed\x20under\x20the\x20Apach\
    e\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\
    \x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20\
    the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20L\
    icense\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICEN\
    SE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agr\
    eed\x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n2\xc9\x07\x20Profile\x20is\x20a\x20\
    common\x20stacktrace\x20profile\x20format.\n\n\x20Measurements\x20repres\
    ented\x20with\x20this\x20format\x20should\x20follow\x20the\n\x20followin\
    g\x20conventions:\n\n\x20-\x20Consumers\x20should\x20treat\x20unset\x20o\
    ptional\x20fields\x20as\x20if\x20they\x20had\x20been\n\x20\x20\x20set\
    \x20with\x20their\x20default\x20value.\n\n\x20-\x20When\x20possible,\x20\
    measurements\x20should\x20be\x20stored\x20in\x20\"unsampled\"\x20form\n\
    \x20\x20\x20that\x20is\x20most\x20useful\x20to\x20humans.\x20\x20There\
    \x20should\x20be\x20enough\n\x20\x20\x20information\x20present\x20to\x20\
    determine\x20the\x20original\x20sampled\x20values.\n\n\x20-\x20On-disk,\
    \x20the\x20serialized\x20proto\x20must\x20be\x20gzip-compressed.\n\n\x20\
    -\x20The\x20profile\x20is\x20represented\x20as\x20a\x20set\x20of\x20samp\
    les,\x20where\x20each\x20sample\n\x20\x20\x20references\x20a\x20sequence\
    \x20of\x20locations,\x20and\x20where\x20each\x20location\x20belongs\n\
    \x20\x20\x20to\x20a\x20mapping.\n\x20-\x20There\x20is\x20a\x20N->1\x20re\
    lationship\x20from\x20sample.location_id\x20entries\x20to\n\x20\x20\x20l\
    ocations.\x20For\x20every\x20sample.location_id\x20entry\x20there\x20mus\
    t\x20be\x20a\n\x20\x20\x20unique\x20Location\x20with\x20that\x20id.\n\
    \x20-\x20There\x20is\x20an\x20optional\x20N->1\x20relationship\x20from\
    \x20locations\x20to\n\x20\x20\x20mappings.\x20For\x20every\x20nonzero\
    \x20Location.mapping_id\x20there\x20must\x20be\x20a\n\x20\x20\x20unique\
    \x20Mapping\x20with\x20that\x20id.\n\n\x08\n\x01\x02\x12\x03(\0\x1b\n\
    \x08\n\x01\x08\x12\x03*\06\n\t\n\x02\x08\x01\x12\x03*\06\n\x08\n\x01\x08\
    \x12\x03+\0-\n\t\n\x02\x08\x08\x12\x03+\0-\n\n\n\x02\x04\0\x12\x04-\0[\
    \x01\n\n\n\x03\x04\0\x01\x12\x03-\x08\x0f\n\xb0\x03\n\x04\x04\0\x02\0\
    \x12\x036\x02%\x1a\xa2\x03\x20A\x20description\x20of\x20the\x20samples\
    \x20associated\x20with\x20each\x20Sample.value.\n\x20For\x20a\x20cpu\x20\
    profile\x20this\x20might\x20be:\n\x20\x20\x20[[\"cpu\",\"nanoseconds\"]]\
    \x20or\x20[[\"wall\",\"seconds\"]]\x20or\x20[[\"syscall\",\"count\"]]\n\
    \x20For\x20a\x20heap\x20profile,\x20this\x20might\x20be:\n\x20\x20\x20[[\
    \"allocations\",\"count\"],\x20[\"space\",\"bytes\"]],\n\x20If\x20one\
    \x20of\x20the\x20values\x20represents\x20the\x20number\x20of\x20events\
    \x20represented\n\x20by\x20the\x20sample,\x20by\x20convention\x20it\x20s\
    hould\x20be\x20at\x20index\x200\x20and\x20use\n\x20sample_type.unit\x20=\
    =\x20\"count\".\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x036\x02\n\n\x0c\n\x05\
    \x04\0\x02\0\x06\x12\x036\x0b\x14\n\x0c\n\x05\x04\0\x02\0\x01\x12\x036\
    \x15\x20\n\x0c\n\x05\x04\0\x02\0\x03\x12\x036#$\n;\n\x04\x04\0\x02\x01\
    \x12\x038\x02\x1d\x1a.\x20The\x20set\x20of\x20samples\x20recorded\x20in\
    \x20this\x20profile.\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x038\x02\n\n\
    \x0c\n\x05\x04\0\x02\x01\x06\x12\x038\x0b\x11\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x038\x12\x18\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x038\x1b\x1c\n\
    \x8c\x01\n\x04\x04\0\x02\x02\x12\x03;\x02\x1f\x1a\x7f\x20Mapping\x20from\
    \x20address\x20ranges\x20to\x20the\x20image/binary/library\x20mapped\n\
    \x20into\x20that\x20address\x20range.\x20\x20mapping[0]\x20will\x20be\
    \x20the\x20main\x20binary.\n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03;\x02\
    \n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03;\x0b\x12\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03;\x13\x1a\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03;\x1d\x1e\
    \n&\n\x04\x04\0\x02\x03\x12\x03=\x02!\x1a\x19\x20Useful\x20program\x20lo\
    cation\n\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03=\x02\n\n\x0c\n\x05\x04\0\
    \x02\x03\x06\x12\x03=\x0b\x13\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03=\x14\
    \x1c\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03=\x1f\x20\n0\n\x04\x04\0\x02\
    \x04\x12\x03?\x02!\x1a#\x20Functions\x20referenced\x20by\x20locations\n\
    \n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03?\x02\n\n\x0c\n\x05\x04\0\x02\x04\
    \x06\x12\x03?\x0b\x13\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03?\x14\x1c\n\
    \x0c\n\x05\x04\0\x02\x04\x03\x12\x03?\x1f\x20\nm\n\x04\x04\0\x02\x05\x12\
    \x03B\x02#\x1a`\x20A\x20common\x20table\x20for\x20strings\x20referenced\
    \x20by\x20various\x20messages.\n\x20string_table[0]\x20must\x20always\
    \x20be\x20\"\".\n\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03B\x02\n\n\x0c\n\
    \x05\x04\0\x02\x05\x05\x12\x03B\x0b\x11\n\x0c\n\x05\x04\0\x02\x05\x01\
    \x12\x03B\x12\x1e\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03B!\"\n\xb2\x01\n\
    \x04\x04\0\x02\x06\x12\x03E\x02\x18\x1a\x88\x01\x20frames\x20with\x20Fun\
    ction.function_name\x20fully\x20matching\x20the\x20following\n\x20regexp\
    \x20will\x20be\x20dropped\x20from\x20the\x20samples,\x20along\x20with\
    \x20their\x20successors.\n\"\x1a\x20Index\x20into\x20string\x20table.\n\
    \n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03E\x02\x07\n\x0c\n\x05\x04\0\x02\
    \x06\x01\x12\x03E\x08\x13\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03E\x16\x17\
    \n\xa0\x01\n\x04\x04\0\x02\x07\x12\x03H\x02\x18\x1aw\x20frames\x20with\
    \x20Function.function_name\x20fully\x20matching\x20the\x20following\n\
    \x20regexp\x20will\x20be\x20kept,\x20even\x20if\x20it\x20matches\x20drop\
    _frames.\n\"\x1a\x20Index\x20into\x20string\x20table.\n\n\x0c\n\x05\x04\
    \0\x02\x07\x05\x12\x03H\x02\x07\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03H\
    \x08\x13\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03H\x16\x17\n\xa7\x01\n\x04\
    \x04\0\x02\x08\x12\x03N\x02\x17\x1aE\x20Time\x20of\x20collection\x20(UTC\
    )\x20represented\x20as\x20nanoseconds\x20past\x20the\x20epoch.\n2S\x20Th\
    e\x20following\x20fields\x20are\x20informational,\x20do\x20not\x20affect\
    \n\x20interpretation\x20of\x20results.\n\n\x0c\n\x05\x04\0\x02\x08\x05\
    \x12\x03N\x02\x07\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03N\x08\x12\n\x0c\n\
    \x05\x04\0\x02\x08\x03\x12\x03N\x15\x16\nB\n\x04\x04\0\x02\t\x12\x03P\
    \x02\x1c\x1a5\x20Duration\x20of\x20the\x20profile,\x20if\x20a\x20duratio\
    n\x20makes\x20sense.\n\n\x0c\n\x05\x04\0\x02\t\x05\x12\x03P\x02\x07\n\
    \x0c\n\x05\x04\0\x02\t\x01\x12\x03P\x08\x16\n\x0c\n\x05\x04\0\x02\t\x03\
    \x12\x03P\x19\x1b\nk\n\x04\x04\0\x02\n\x12\x03S\x02\x1d\x1a^\x20The\x20k\
    ind\x20of\x20events\x20between\x20sampled\x20ocurrences.\n\x20e.g\x20[\
    \x20\"cpu\",\"cycles\"\x20]\x20or\x20[\x20\"heap\",\"bytes\"\x20]\n\n\
    \x0c\n\x05\x04\0\x02\n\x06\x12\x03S\x02\x0b\n\x0c\n\x05\x04\0\x02\n\x01\
    \x12\x03S\x0c\x17\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03S\x1a\x1c\n@\n\x04\
    \x04\0\x02\x0b\x12\x03U\x02\x14\x1a3\x20The\x20number\x20of\x20events\
    \x20between\x20sampled\x20occurrences.\n\n\x0c\n\x05\x04\0\x02\x0b\x05\
    \x12\x03U\x02\x07\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x03U\x08\x0e\n\x0c\n\
    \x05\x04\0\x02\x0b\x03\x12\x03U\x11\x13\nU\n\x04\x04\0\x02\x0c\x12\x03W\
    \x02\x1e\x1a*\x20Freeform\x20text\x20associated\x20to\x20the\x20profile.\
    \n\"\x1c\x20Indices\x20into\x20string\x20table.\n\n\x0c\n\x05\x04\0\x02\
    \x0c\x04\x12\x03W\x02\n\n\x0c\n\x05\x04\0\x02\x0c\x05\x12\x03W\x0b\x10\n\
    \x0c\n\x05\x04\0\x02\x0c\x01\x12\x03W\x11\x18\n\x0c\n\x05\x04\0\x02\x0c\
    \x03\x12\x03W\x1b\x1d\n\x92\x01\n\x04\x04\0\x02\r\x12\x03Z\x02!\x1a\x84\
    \x01\x20Index\x20into\x20the\x20string\x20table\x20of\x20the\x20type\x20\
    of\x20the\x20preferred\x20sample\n\x20value.\x20If\x20unset,\x20clients\
    \x20should\x20default\x20to\x20the\x20last\x20sample\x20value.\n\n\x0c\n\
    \x05\x04\0\x02\r\x05\x12\x03Z\x02\x07\n\x0c\n\x05\x04\0\x02\r\x01\x12\
    \x03Z\x08\x1b\n\x0c\n\x05\x04\0\x02\r\x03\x12\x03Z\x1e\x20\nQ\n\x02\x04\
    \x01\x12\x04^\0a\x01\x1aE\x20ValueType\x20describes\x20the\x20semantics\
    \x20and\x20measurement\x20units\x20of\x20a\x20value.\n\n\n\n\x03\x04\x01\
    \x01\x12\x03^\x08\x11\n'\n\x04\x04\x01\x02\0\x12\x03_\x02\x11\"\x1a\x20I\
    ndex\x20into\x20string\x20table.\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\
    _\x02\x07\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03_\x08\x0c\n\x0c\n\x05\x04\
    \x01\x02\0\x03\x12\x03_\x0f\x10\n'\n\x04\x04\x01\x02\x01\x12\x03`\x02\
    \x11\"\x1a\x20Index\x20into\x20string\x20table.\n\n\x0c\n\x05\x04\x01\
    \x02\x01\x05\x12\x03`\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03`\
    \x08\x0c\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03`\x0f\x10\n\xfe\x01\n\
    \x02\x04\x02\x12\x04g\0u\x01\x1a\xf1\x01\x20Each\x20Sample\x20records\
    \x20values\x20encountered\x20in\x20some\x20program\n\x20context.\x20The\
    \x20program\x20context\x20is\x20typically\x20a\x20stack\x20trace,\x20per\
    haps\n\x20augmented\x20with\x20auxiliary\x20information\x20like\x20the\
    \x20thread-id,\x20some\n\x20indicator\x20of\x20a\x20higher\x20level\x20r\
    equest\x20being\x20handled\x20etc.\n\n\n\n\x03\x04\x02\x01\x12\x03g\x08\
    \x0e\ni\n\x04\x04\x02\x02\0\x12\x03j\x02\"\x1a\\\x20The\x20ids\x20record\
    ed\x20here\x20correspond\x20to\x20a\x20Profile.location.id.\n\x20The\x20\
    leaf\x20is\x20at\x20location_id[0].\n\n\x0c\n\x05\x04\x02\x02\0\x04\x12\
    \x03j\x02\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03j\x0b\x11\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03j\x12\x1d\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03j\x20!\n\xe6\x02\n\x04\x04\x02\x02\x01\x12\x03q\x02\x1b\x1a\xd8\x02\
    \x20The\x20type\x20and\x20unit\x20of\x20each\x20value\x20is\x20defined\
    \x20by\x20the\x20corresponding\n\x20entry\x20in\x20Profile.sample_type.\
    \x20All\x20samples\x20must\x20have\x20the\x20same\n\x20number\x20of\x20v\
    alues,\x20the\x20same\x20as\x20the\x20length\x20of\x20Profile.sample_typ\
    e.\n\x20When\x20aggregating\x20multiple\x20samples\x20into\x20a\x20singl\
    e\x20sample,\x20the\n\x20result\x20has\x20a\x20list\x20of\x20values\x20t\
    hat\x20is\x20the\x20element-wise\x20sum\x20of\x20the\n\x20lists\x20of\
    \x20the\x20originals.\n\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03q\x02\n\n\
    \x0c\n\x05\x04\x02\x02\x01\x05\x12\x03q\x0b\x10\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x03q\x11\x16\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03q\x19\
    \x1a\n\x7f\n\x04\x04\x02\x02\x02\x12\x03t\x02\x1b\x1ar\x20label\x20inclu\
    des\x20additional\x20context\x20for\x20this\x20sample.\x20It\x20can\x20i\
    nclude\n\x20things\x20like\x20a\x20thread\x20id,\x20allocation\x20size,\
    \x20etc\n\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03t\x02\n\n\x0c\n\x05\x04\
    \x02\x02\x02\x06\x12\x03t\x0b\x10\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\
    \x03t\x11\x16\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03t\x19\x1a\n\x0b\n\
    \x02\x04\x03\x12\x05w\0\x86\x01\x01\n\n\n\x03\x04\x03\x01\x12\x03w\x08\r\
    \n&\n\x04\x04\x03\x02\0\x12\x03x\x02\x10\"\x19\x20Index\x20into\x20strin\
    g\x20table\n\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03x\x02\x07\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03x\x08\x0b\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03x\x0e\x0f\nV\n\x04\x04\x03\x02\x01\x12\x03{\x02\x10\x1a.\x20At\x20mo\
    st\x20one\x20of\x20the\x20following\x20must\x20be\x20present\n\"\x19\x20\
    Index\x20into\x20string\x20table\n\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\
    \x03{\x02\x07\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03{\x08\x0b\n\x0c\n\
    \x05\x04\x03\x02\x01\x03\x12\x03{\x0e\x0f\n\x0b\n\x04\x04\x03\x02\x02\
    \x12\x03|\x02\x10\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03|\x02\x07\n\x0c\
    \n\x05\x04\x03\x02\x02\x01\x12\x03|\x08\x0b\n\x0c\n\x05\x04\x03\x02\x02\
    \x03\x12\x03|\x0e\x0f\n\xc6\x03\n\x04\x04\x03\x02\x03\x12\x04\x85\x01\
    \x02\x15\x1a\x9c\x03\x20Should\x20only\x20be\x20present\x20when\x20num\
    \x20is\x20present.\n\x20Specifies\x20the\x20units\x20of\x20num.\n\x20Use\
    \x20arbitrary\x20string\x20(for\x20example,\x20\"requests\")\x20as\x20a\
    \x20custom\x20count\x20unit.\n\x20If\x20no\x20unit\x20is\x20specified,\
    \x20consumer\x20may\x20apply\x20heuristic\x20to\x20deduce\x20the\x20unit\
    .\n\x20Consumers\x20may\x20also\x20\x20interpret\x20units\x20like\x20\"b\
    ytes\"\x20and\x20\"kilobytes\"\x20as\x20memory\n\x20units\x20and\x20unit\
    s\x20like\x20\"seconds\"\x20and\x20\"nanoseconds\"\x20as\x20time\x20unit\
    s,\n\x20and\x20apply\x20appropriate\x20unit\x20conversions\x20to\x20thes\
    e.\n\"\x19\x20Index\x20into\x20string\x20table\n\n\r\n\x05\x04\x03\x02\
    \x03\x05\x12\x04\x85\x01\x02\x07\n\r\n\x05\x04\x03\x02\x03\x01\x12\x04\
    \x85\x01\x08\x10\n\r\n\x05\x04\x03\x02\x03\x03\x12\x04\x85\x01\x13\x14\n\
    \x0c\n\x02\x04\x04\x12\x06\x88\x01\0\x9f\x01\x01\n\x0b\n\x03\x04\x04\x01\
    \x12\x04\x88\x01\x08\x0f\n2\n\x04\x04\x04\x02\0\x12\x04\x8a\x01\x02\x10\
    \x1a$\x20Unique\x20nonzero\x20id\x20for\x20the\x20mapping.\n\n\r\n\x05\
    \x04\x04\x02\0\x05\x12\x04\x8a\x01\x02\x08\n\r\n\x05\x04\x04\x02\0\x01\
    \x12\x04\x8a\x01\t\x0b\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\x8a\x01\x0e\
    \x0f\nK\n\x04\x04\x04\x02\x01\x12\x04\x8c\x01\x02\x1a\x1a=\x20Address\
    \x20at\x20which\x20the\x20binary\x20(or\x20DLL)\x20is\x20loaded\x20into\
    \x20memory.\n\n\r\n\x05\x04\x04\x02\x01\x05\x12\x04\x8c\x01\x02\x08\n\r\
    \n\x05\x04\x04\x02\x01\x01\x12\x04\x8c\x01\t\x15\n\r\n\x05\x04\x04\x02\
    \x01\x03\x12\x04\x8c\x01\x18\x19\nH\n\x04\x04\x04\x02\x02\x12\x04\x8e\
    \x01\x02\x1a\x1a:\x20The\x20limit\x20of\x20the\x20address\x20range\x20oc\
    cupied\x20by\x20this\x20mapping.\n\n\r\n\x05\x04\x04\x02\x02\x05\x12\x04\
    \x8e\x01\x02\x08\n\r\n\x05\x04\x04\x02\x02\x01\x12\x04\x8e\x01\t\x15\n\r\
    \n\x05\x04\x04\x02\x02\x03\x12\x04\x8e\x01\x18\x19\nR\n\x04\x04\x04\x02\
    \x03\x12\x04\x90\x01\x02\x19\x1aD\x20Offset\x20in\x20the\x20binary\x20th\
    at\x20corresponds\x20to\x20the\x20first\x20mapped\x20address.\n\n\r\n\
    \x05\x04\x04\x02\x03\x05\x12\x04\x90\x01\x02\x08\n\r\n\x05\x04\x04\x02\
    \x03\x01\x12\x04\x90\x01\t\x14\n\r\n\x05\x04\x04\x02\x03\x03\x12\x04\x90\
    \x01\x17\x18\n\xc4\x01\n\x04\x04\x04\x02\x04\x12\x04\x94\x01\x02\x15\x1a\
    \x9a\x01\x20The\x20object\x20this\x20entry\x20is\x20loaded\x20from.\x20\
    \x20This\x20can\x20be\x20a\x20filename\x20on\n\x20disk\x20for\x20the\x20\
    main\x20binary\x20and\x20shared\x20libraries,\x20or\x20virtual\n\x20abst\
    ractions\x20like\x20\"[vdso]\".\n\"\x19\x20Index\x20into\x20string\x20ta\
    ble\n\n\r\n\x05\x04\x04\x02\x04\x05\x12\x04\x94\x01\x02\x07\n\r\n\x05\
    \x04\x04\x02\x04\x01\x12\x04\x94\x01\x08\x10\n\r\n\x05\x04\x04\x02\x04\
    \x03\x12\x04\x94\x01\x13\x14\n\xe8\x01\n\x04\x04\x04\x02\x05\x12\x04\x98\
    \x01\x02\x15\x1a\xbe\x01\x20A\x20string\x20that\x20uniquely\x20identifie\
    s\x20a\x20particular\x20program\x20version\n\x20with\x20high\x20probabil\
    ity.\x20E.g.,\x20for\x20binaries\x20generated\x20by\x20GNU\x20tools,\n\
    \x20it\x20could\x20be\x20the\x20contents\x20of\x20the\x20.note.gnu.build\
    -id\x20field.\n\"\x19\x20Index\x20into\x20string\x20table\n\n\r\n\x05\
    \x04\x04\x02\x05\x05\x12\x04\x98\x01\x02\x07\n\r\n\x05\x04\x04\x02\x05\
    \x01\x12\x04\x98\x01\x08\x10\n\r\n\x05\x04\x04\x02\x05\x03\x12\x04\x98\
    \x01\x13\x14\nN\n\x04\x04\x04\x02\x06\x12\x04\x9b\x01\x02\x19\x1a@\x20Th\
    e\x20following\x20fields\x20indicate\x20the\x20resolution\x20of\x20symbo\
    lic\x20info.\n\n\r\n\x05\x04\x04\x02\x06\x05\x12\x04\x9b\x01\x02\x06\n\r\
    \n\x05\x04\x04\x02\x06\x01\x12\x04\x9b\x01\x07\x14\n\r\n\x05\x04\x04\x02\
    \x06\x03\x12\x04\x9b\x01\x17\x18\n\x0c\n\x04\x04\x04\x02\x07\x12\x04\x9c\
    \x01\x02\x19\n\r\n\x05\x04\x04\x02\x07\x05\x12\x04\x9c\x01\x02\x06\n\r\n\
    \x05\x04\x04\x02\x07\x01\x12\x04\x9c\x01\x07\x14\n\r\n\x05\x04\x04\x02\
    \x07\x03\x12\x04\x9c\x01\x17\x18\n\x0c\n\x04\x04\x04\x02\x08\x12\x04\x9d\
    \x01\x02\x1c\n\r\n\x05\x04\x04\x02\x08\x05\x12\x04\x9d\x01\x02\x06\n\r\n\
    \x05\x04\x04\x02\x08\x01\x12\x04\x9d\x01\x07\x17\n\r\n\x05\x04\x04\x02\
    \x08\x03\x12\x04\x9d\x01\x1a\x1b\n\x0c\n\x04\x04\x04\x02\t\x12\x04\x9e\
    \x01\x02\x1e\n\r\n\x05\x04\x04\x02\t\x05\x12\x04\x9e\x01\x02\x06\n\r\n\
    \x05\x04\x04\x02\t\x01\x12\x04\x9e\x01\x07\x18\n\r\n\x05\x04\x04\x02\t\
    \x03\x12\x04\x9e\x01\x1b\x1d\nD\n\x02\x04\x05\x12\x06\xa2\x01\0\xbe\x01\
    \x01\x1a6\x20Describes\x20function\x20and\x20line\x20table\x20debug\x20i\
    nformation.\n\n\x0b\n\x03\x04\x05\x01\x12\x04\xa2\x01\x08\x10\n\x7f\n\
    \x04\x04\x05\x02\0\x12\x04\xa5\x01\x02\x10\x1aq\x20Unique\x20nonzero\x20\
    id\x20for\x20the\x20location.\x20\x20A\x20profile\x20could\x20use\n\x20i\
    nstruction\x20addresses\x20or\x20any\x20integer\x20sequence\x20as\x20ids\
    .\n\n\r\n\x05\x04\x05\x02\0\x05\x12\x04\xa5\x01\x02\x08\n\r\n\x05\x04\
    \x05\x02\0\x01\x12\x04\xa5\x01\t\x0b\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\
    \xa5\x01\x0e\x0f\n\xa4\x01\n\x04\x04\x05\x02\x01\x12\x04\xa9\x01\x02\x18\
    \x1a\x95\x01\x20The\x20id\x20of\x20the\x20corresponding\x20profile.Mappi\
    ng\x20for\x20this\x20location.\n\x20It\x20can\x20be\x20unset\x20if\x20th\
    e\x20mapping\x20is\x20unknown\x20or\x20not\x20applicable\x20for\n\x20thi\
    s\x20profile\x20type.\n\n\r\n\x05\x04\x05\x02\x01\x05\x12\x04\xa9\x01\
    \x02\x08\n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\xa9\x01\t\x13\n\r\n\x05\
    \x04\x05\x02\x01\x03\x12\x04\xa9\x01\x16\x17\n\xbf\x02\n\x04\x04\x05\x02\
    \x02\x12\x04\xaf\x01\x02\x15\x1a\xb0\x02\x20The\x20instruction\x20addres\
    s\x20for\x20this\x20location,\x20if\x20available.\x20\x20It\n\x20should\
    \x20be\x20within\x20[Mapping.memory_start...Mapping.memory_limit]\n\x20f\
    or\x20the\x20corresponding\x20mapping.\x20A\x20non-leaf\x20address\x20ma\
    y\x20be\x20in\x20the\n\x20middle\x20of\x20a\x20call\x20instruction.\x20I\
    t\x20is\x20up\x20to\x20display\x20tools\x20to\x20find\n\x20the\x20beginn\
    ing\x20of\x20the\x20instruction\x20if\x20necessary.\n\n\r\n\x05\x04\x05\
    \x02\x02\x05\x12\x04\xaf\x01\x02\x08\n\r\n\x05\x04\x05\x02\x02\x01\x12\
    \x04\xaf\x01\t\x10\n\r\n\x05\x04\x05\x02\x02\x03\x12\x04\xaf\x01\x13\x14\
    \n\xa1\x02\n\x04\x04\x05\x02\x03\x12\x04\xb7\x01\x02\x19\x1a\x92\x02\x20\
    Multiple\x20line\x20indicates\x20this\x20location\x20has\x20inlined\x20f\
    unctions,\n\x20where\x20the\x20last\x20entry\x20represents\x20the\x20cal\
    ler\x20into\x20which\x20the\n\x20preceding\x20entries\x20were\x20inlined\
    .\n\n\x20E.g.,\x20if\x20memcpy()\x20is\x20inlined\x20into\x20printf:\n\
    \x20\x20\x20\x20line[0].function_name\x20==\x20\"memcpy\"\n\x20\x20\x20\
    \x20line[1].function_name\x20==\x20\"printf\"\n\n\r\n\x05\x04\x05\x02\
    \x03\x04\x12\x04\xb7\x01\x02\n\n\r\n\x05\x04\x05\x02\x03\x06\x12\x04\xb7\
    \x01\x0b\x0f\n\r\n\x05\x04\x05\x02\x03\x01\x12\x04\xb7\x01\x10\x14\n\r\n\
    \x05\x04\x05\x02\x03\x03\x12\x04\xb7\x01\x17\x18\n\xbd\x02\n\x04\x04\x05\
    \x02\x04\x12\x04\xbd\x01\x02\x15\x1a\xae\x02\x20Provides\x20an\x20indica\
    tion\x20that\x20multiple\x20symbols\x20map\x20to\x20this\x20location's\n\
    \x20address,\x20for\x20example\x20due\x20to\x20identical\x20code\x20fold\
    ing\x20by\x20the\x20linker.\x20In\x20that\n\x20case\x20the\x20line\x20in\
    formation\x20above\x20represents\x20one\x20of\x20the\x20multiple\n\x20sy\
    mbols.\x20This\x20field\x20must\x20be\x20recomputed\x20when\x20the\x20sy\
    mbolization\x20state\x20of\x20the\n\x20profile\x20changes.\n\n\r\n\x05\
    \x04\x05\x02\x04\x05\x12\x04\xbd\x01\x02\x06\n\r\n\x05\x04\x05\x02\x04\
    \x01\x12\x04\xbd\x01\x07\x10\n\r\n\x05\x04\x05\x02\x04\x03\x12\x04\xbd\
    \x01\x13\x14\n\x0c\n\x02\x04\x06\x12\x06\xc0\x01\0\xc5\x01\x01\n\x0b\n\
    \x03\x04\x06\x01\x12\x04\xc0\x01\x08\x0c\nK\n\x04\x04\x06\x02\0\x12\x04\
    \xc2\x01\x02\x19\x1a=\x20The\x20id\x20of\x20the\x20corresponding\x20prof\
    ile.Function\x20for\x20this\x20line.\n\n\r\n\x05\x04\x06\x02\0\x05\x12\
    \x04\xc2\x01\x02\x08\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\xc2\x01\t\x14\n\
    \r\n\x05\x04\x06\x02\0\x03\x12\x04\xc2\x01\x17\x18\n+\n\x04\x04\x06\x02\
    \x01\x12\x04\xc4\x01\x02\x11\x1a\x1d\x20Line\x20number\x20in\x20source\
    \x20code.\n\n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\xc4\x01\x02\x07\n\r\n\
    \x05\x04\x06\x02\x01\x01\x12\x04\xc4\x01\x08\x0c\n\r\n\x05\x04\x06\x02\
    \x01\x03\x12\x04\xc4\x01\x0f\x10\n\x0c\n\x02\x04\x07\x12\x06\xc7\x01\0\
    \xd3\x01\x01\n\x0b\n\x03\x04\x07\x01\x12\x04\xc7\x01\x08\x10\n3\n\x04\
    \x04\x07\x02\0\x12\x04\xc9\x01\x02\x10\x1a%\x20Unique\x20nonzero\x20id\
    \x20for\x20the\x20function.\n\n\r\n\x05\x04\x07\x02\0\x05\x12\x04\xc9\
    \x01\x02\x08\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\xc9\x01\t\x0b\n\r\n\x05\
    \x04\x07\x02\0\x03\x12\x04\xc9\x01\x0e\x0f\ne\n\x04\x04\x07\x02\x01\x12\
    \x04\xcb\x01\x02\x11\x1a<\x20Name\x20of\x20the\x20function,\x20in\x20hum\
    an-readable\x20form\x20if\x20available.\n\"\x19\x20Index\x20into\x20stri\
    ng\x20table\n\n\r\n\x05\x04\x07\x02\x01\x05\x12\x04\xcb\x01\x02\x07\n\r\
    \n\x05\x04\x07\x02\x01\x01\x12\x04\xcb\x01\x08\x0c\n\r\n\x05\x04\x07\x02\
    \x01\x03\x12\x04\xcb\x01\x0f\x10\n\x8a\x01\n\x04\x04\x07\x02\x02\x12\x04\
    \xce\x01\x02\x18\x1aa\x20Name\x20of\x20the\x20function,\x20as\x20identif\
    ied\x20by\x20the\x20system.\n\x20For\x20instance,\x20it\x20can\x20be\x20\
    a\x20C++\x20mangled\x20name.\n\"\x19\x20Index\x20into\x20string\x20table\
    \n\n\r\n\x05\x04\x07\x02\x02\x05\x12\x04\xce\x01\x02\x07\n\r\n\x05\x04\
    \x07\x02\x02\x01\x12\x04\xce\x01\x08\x13\n\r\n\x05\x04\x07\x02\x02\x03\
    \x12\x04\xce\x01\x16\x17\nO\n\x04\x04\x07\x02\x03\x12\x04\xd0\x01\x02\
    \x15\x1a&\x20Source\x20file\x20containing\x20the\x20function.\n\"\x19\
    \x20Index\x20into\x20string\x20table\n\n\r\n\x05\x04\x07\x02\x03\x05\x12\
    \x04\xd0\x01\x02\x07\n\r\n\x05\x04\x07\x02\x03\x01\x12\x04\xd0\x01\x08\
    \x10\n\r\n\x05\x04\x07\x02\x03\x03\x12\x04\xd0\x01\x13\x14\n+\n\x04\x04\
    \x07\x02\x04\x12\x04\xd2\x01\x02\x17\x1a\x1d\x20Line\x20number\x20in\x20\
    source\x20file.\n\n\r\n\x05\x04\x07\x02\x04\x05\x12\x04\xd2\x01\x02\x07\
    \n\r\n\x05\x04\x07\x02\x04\x01\x12\x04\xd2\x01\x08\x12\n\r\n\x05\x04\x07\
    \x02\x04\x03\x12\x04\xd2\x01\x15\x16b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(Profile::generated_message_descriptor_data());
            messages.push(ValueType::generated_message_descriptor_data());
            messages.push(Sample::generated_message_descriptor_data());
            messages.push(Label::generated_message_descriptor_data());
            messages.push(Mapping::generated_message_descriptor_data());
            messages.push(Location::generated_message_descriptor_data());
            messages.push(Line::generated_message_descriptor_data());
            messages.push(Function::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

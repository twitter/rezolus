// Thrift schema for samples generated by the background profiling daemon.
//
// Note: All integers are unsigned values that have been coerced to signed ones.
//       This means that negative values actually correspond to large positive
//       values.

#@namespace scala com.twitter.iop.profiling.thriftscala
namespace java com.twitter.iop.profiling.thriftjava
namespace py iop.twitter.profiling

// Timestamp representing the number of nanoseconds since the unix epoch.
//
// This mirrors timespec on linux.
struct Timestamp {
    1: required i64 seconds,
    2: required i64 nanoseconds,
}

// An individual frame within the sample's call stack.
struct StackFrame {
    // Instruction pointer within the recorded stack frame.
    1: optional i64 ip,

    // The demangled name of the symbol, if perf is able to resolve it.
    //
    // This should nominally be a correctly encoded string but may not be depending
    // on how symbol names are processed.
    2: optional string symbol,

    // The offset that the instruction pointer corresponds to within the
    // dso that it was read from.
    // 3: optional i64 offset,

    // The executable/library/etc that the instruction at the instruction
    // pointer belongs to.
    //
    // This should nominally be a proper string but may not be valid utf8.
    4: optional string dso,

    // The address space of the comment: whether it's local, global, etc.
    5: optional i32 binding,

    6: optional i64 start,
}

// A single sample along with all associated metadata.
struct StackSample {
    // Process ID.
    //
    // This may be 0 if the sample corresponds to a kernel thread.
    1: optional i32 pid,

    // Thread ID.
    2: optional i32 tid,

    // The CPU on which the sample was recorded.
    3: optional i32 cpu,

    // Approximate timestamp at which the sample was taken.
    //
    // Note that this is the result of a best-effort attempt at reconstructing
    // a unix timestamp from internal timestamps. Timestamps may be skewed between
    // different machines, different CPUs, or even (rarely) within the same CPU
    // so the ordering of timestamps does not necessarily imply the same ordering
    // of events. 
    4: required Timestamp time,

    // All stack frames that were collected for this sample.
    5: list<StackFrame> frames,

    // The hostname of the machine on which the sample was taken.
    6: optional string hostname,

    // The aurora job name, without the datacenter or instance id components.
    // This will be a string like "io-perf/prod/charlie_cache".
    //
    // For processes outside an aurora job this is the systemd service name, if
    // one is present.
    7: optional string serviceName,

    // The command string of the process.
    //
    // By default, this will be the binary part of the command that was used to
    // invoke the process. However, this is just the name of the main thread so
    // it can be changed by the process however it wants to.
    8: optional string command,

    9: optional i64 period,

    // The instance ID within the aurora job.
    10: optional i32 instanceId,

    // The name of the container that the sampled process was running in on the host.
    11: optional string source,

    // The name of the thread that was sampled.
    12: optional string threadName,
}
